from pickle import load
import streamlit as st
import time

import xgboost as xgb

from backend.preprocessing import *

encoder = load(open('backend/moscow_models/encoder_cb.pkl', 'rb'))

model = xgb.Booster()
model.load_model("backend/moscow_models/modelxg.pkl")git pull origin master

station_computer = StationComputer('stations/moscow_stations.csv')
address_translator = AddressTranslator(['—É–ª.', '–ø–µ—Ä.', '–ø—Ä–æ—Å–ø.', '–ø–æ—Å–µ–ª–µ–Ω–∏–µ', '–∂–∫', '–ø—Ä–æ–µ–∑–¥', '—à.', '–Ω–∞–±.',
                                        '–º–∫—Ä', '–¥—Ä—É–≥–æ–µ', '–ø–æ—Å.', '–∫–≤-–ª', '–ø–∞—Ä–∫'])

st.set_page_config(page_title="Prediction", page_icon="üëã")
st.write('# –û—Ü–µ–Ω–∫–∞ –∑–∞–ª–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –≥–æ—Ä–æ–¥–µ –ú–æ—Å–∫–≤–∞')
st.write('## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏:')
st.sidebar.header('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ü–µ–Ω–∏–≤–∞–µ–º–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã:')

uploaded_file = st.sidebar.file_uploader('–í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π CSV —Ñ–∞–π–ª', type='csv')

if uploaded_file is not None:
    input_df = pd.read_csv(uploaded_file)
else:
    area = st.sidebar.slider('**–ü–ª–æ—â–∞–¥—å –∂–∏–ª—å—è** –≤ –º–µ—Ç—Ä–∞—Ö –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö', 10, 250, 10)
    area_live = st.sidebar.slider('**–ü–ª–æ—â–∞–¥—å –∂–∏–ª–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è** –≤ –º–µ—Ç—Ä–∞—Ö –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö', 2, area, 2)
    number_of_rooms = st.sidebar.slider('**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç**', 1, 10, 1, 1)

    number_of_floors = st.sidebar.slider('**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π**', 1, 200, 1, 1)

    if number_of_floors == 1:
        floor = 1
    else:
        floor = st.sidebar.slider('**–ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞**', 1, number_of_floors, 1, 1)

    kitchen_area = st.sidebar.slider('**–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏** –≤ –º–µ—Ç—Ä–∞—Ö –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö', 2, 100, 2)
    address = st.sidebar.text_input('**–ê–¥—Ä–µ—Å –∂–∏–ª—å—è**', value='–£–ª–∏—Ü–∞ –ü—É—à–∫–∏–Ω–∞, –¥–æ–º 2')

    st.sidebar.write('## **–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–ª–µ–¥—É–µ—Ç –≤–≤–æ–¥–∏—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π**')

    try:
        latitude = Degrees(st.sidebar.text_input('**–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–æ—Ç—É**', value='55.752'))
    except ValueError:
        st.sidebar.write('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –≤–≤–æ–¥–∏—Ç–µ —à–∏—Ä–æ—Ç—É –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω—É—é –¥—Ä–æ–±—å (55.752 –¥–ª—è —à–∏—Ä–æ—Ç—ã –ú–æ—Å–∫–≤—ã)')
        latitude = Degrees('55.752')
        st.write('–®–∏—Ä–æ—Ç–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω–∞')
    try:
        longitude = Degrees(st.sidebar.text_input('**–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–≥–æ—Ç—É**', value='37.615'))
    except ValueError:
        st.sidebar.write('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –≤–≤–æ–¥–∏—Ç–µ –¥–æ–ª–≥–æ—Ç—É –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω—É—é –¥—Ä–æ–±—å (37.615 –¥–ª—è –¥–æ–ª–≥–æ—Ç—ã –ú–æ—Å–∫–≤—ã)')
        longitude = Degrees('37.615')
        st.write('–î–æ–ª–≥–æ—Ç–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω–∞')

    is_new = st.sidebar.radio('–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–º –Ω–æ–≤–æ—Å—Ç—Ä–æ–µ–º?', ['–î–∞', '–ù–µ—Ç'])

    closest_station, station_distance = station_computer.compute_closest(latitude, longitude)

    input_df = pd.DataFrame(data={'is_new': [is_new == '–î–∞'],
                                  'rooms': [number_of_rooms],
                                  'area': [area],
                                  'area_live': [area_live],
                                  'kitchen_area': [kitchen_area],
                                  'floor_': [floor],
                                  'floors': [number_of_floors],
                                  'closest_station': [closest_station],
                                  'dist_to_station': [station_distance],
                                  'time': [int(time.time())],
                                  'address_type': [address_translator.give_address_type(address)]})

    st.write(input_df)

pred = model.predict(xgb.DMatrix(encoder.transform(input_df)))

if len(pred) == 1:
    st.write(f'### –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –º–µ–∂–¥—É {int(pred[0]) *0.92:.0f} –∏ {int(pred[0]) * 1.02:.0f} —Ä—É–±–ª–µ–π')
else:
    st.write('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:')
    st.write(pd.DataFrame(pred))


    @st.cache_data
    def convert_df(df):
        return df.to_csv(index=False).encode('utf-8')


    csv = convert_df(pd.DataFrame(pred))

    st.download_button(
        "Press to Download",
        csv,
        "file.csv",
        "text/csv",
        key='download-csv'
    )
